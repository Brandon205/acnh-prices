{"version":3,"sources":["Fish.js","Bugs.js","BugAndFish.js","App.js","serviceWorker.js","index.js"],"names":["Fish","props","mappedFish","fish","map","id","className","key","Bugs","mappedBugs","bugs","bug","BugAndFish","mappedAnimals","all","animal","App","content","objFishPrices","Object","entries","fishPrices","objBugPrices","bugPrices","objAllPrices","allPrices","useState","selected","setSelected","filterValue","setFilterValue","fishes","setFishes","setBugs","bugsAndFish","setBugsAndFish","filteredList","onClick","htmlFor","style","display","name","value","onChange","e","filter","toLocaleLowerCase","includes","target","handleFilterChange","placeholder","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.12d0f010.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Fish(props) {\n    let mappedFish = props.fish.map( (fish, id) => <div className=\"animal\" key={id}>{fish[0]} <p className=\"prices\">{fish[1]}</p></div> );\n\n    return (\n        <div className=\"price-list\">\n            <h1>ACNH Fish:</h1>\n            {mappedFish}\n        </div>\n    )\n}\n","import React from 'react';\n\nexport default function Bugs(props) {\n    let mappedBugs = props.bugs.map( (bug, id) => <div className=\"animal\" key={id}>{bug[0]} <p className=\"prices\">{bug[1]}</p> </div>);\n\n    return (\n        <div className=\"price-list\">\n            <h1>ACNH Bugs:</h1>\n            {mappedBugs}\n        </div>\n    )\n}\n","import React from 'react';\n\nexport default function BugAndFish(props) {\n    let mappedAnimals = props.all.map( (animal, id) => <div className=\"animal\" key={id}>{animal[0]} <p className=\"prices\">{animal[1]}</p></div> );\n\n    return (\n        <div className=\"price-list\">\n            <h1>All ACNH Animals: </h1>\n            {mappedAnimals}\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport fishPrices from './fish.json';\nimport bugPrices from './bugs.json';\nimport allPrices from './allAnimals.json';\nimport Fish from './Fish';\nimport Bugs from './Bugs';\nimport BugAndFish from './BugAndFish';\nimport './App.css';\n\nexport default function App() {\n  let objFishPrices = Object.entries(fishPrices);\n  let objBugPrices = Object.entries(bugPrices);\n  let objAllPrices = Object.entries(allPrices);\n\n  const [selected, setSelected] = useState('AllPrices');\n  const [filterValue, setFilterValue] = useState('');\n  const [fishes, setFishes] = useState(objFishPrices); // Fishes to show \n  const [bugs, setBugs] = useState(objBugPrices);  // Bugs to show\n  const [bugsAndFish, setBugsAndFish] = useState(objAllPrices); // All to show\n\n\n  let content;\n  switch(selected) {\n    case 'Fish':\n      content = (<Fish fish={fishes} />);\n      break;\n    case 'Bugs':\n      content = (<Bugs bugs={bugs} />);\n      break;\n    case 'AllPrices':\n      content = (<BugAndFish all={bugsAndFish} />);\n      break;\n    default:\n      content = (<BugAndFish all={bugsAndFish} />);\n  }\n\n  let filteredList = \"\";\n  let handleFilterChange = (e) => {\n    if (selected === \"AllPrices\") { //set the props for the thing to render to the filtered list\n      filteredList = objAllPrices.filter(animal => animal[0].toLocaleLowerCase().includes(e.target.value.toLocaleLowerCase()));\n      setBugsAndFish(filteredList);\n    } else if (selected === \"Fish\") {\n      filteredList = objFishPrices.filter(fish => fish[0].toLocaleLowerCase().includes(e.target.value.toLocaleLowerCase()));\n      setFishes(filteredList);\n    } else if (selected === \"Bugs\") {\n      filteredList = objBugPrices.filter(bug => bug[0].toLocaleLowerCase().includes(e.target.value.toLocaleLowerCase()));\n      setBugs(filteredList);\n    }\n    setFilterValue(e.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Animal Crossing New Horizons Sell Guide</h1>\n      <header>\n        <div className={selected === \"Fish\" ? \"tabs tab-bkg\" : \"tabs\"} onClick={() => setSelected('Fish')}>Fish</div>\n        <div className={selected === \"AllPrices\" ? \"tabs tab-bkg\" : \"tabs\"} onClick={() => setSelected('AllPrices')}>All Prices</div>\n        <div className={selected === \"Bugs\" ? \"tabs tab-bkg\" : \"tabs\"} onClick={() => setSelected('Bugs')}>Bugs</div>\n      </header>\n      <label htmlFor=\"search\" style={{display: 'none'}}>Search</label>\n      <input name=\"search\" value={filterValue} onChange={(e) => handleFilterChange(e)} placeholder=\"Search Here\" />\n      {content}\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}